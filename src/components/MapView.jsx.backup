import React, { useState, useEffect } from 'react';
import { MapContainer, TileLayer, Marker, Popup, useMap } from 'react-leaflet';
import { MapPin, Navigation, ExternalLink, Hotel, Train, Plane, Camera } from 'lucide-react';
import { getTodaysTrip } from '../data/tripData';
import L from 'leaflet';

// Fix for default markers in React-Leaflet
import icon from 'leaflet/dist/images/marker-icon.png';
import iconShadow from 'leaflet/dist/images/marker-shadow.png';

let DefaultIcon = L.divIcon({
  html: '<div style="background-color: #3b82f6; width: 25px; height: 25px; border-radius: 50%; border: 3px solid white; box-shadow: 0 2px 4px rgba(0,0,0,0.3);"></div>',
  iconSize: [25, 25],
  iconAnchor: [12, 12],
});

// Custom icons for different location types
const hotelIcon = L.divIcon({
  html: '<div style="background-color: #9333ea; width: 30px; height: 30px; border-radius: 50%; border: 3px solid white; display: flex; align-items: center; justify-content: center; box-shadow: 0 2px 6px rgba(0,0,0,0.3);"><div style="color: white; font-size: 16px;">üè®</div></div>',
  iconSize: [30, 30],
  iconAnchor: [15, 15],
});

const trainIcon = L.divIcon({
  html: '<div style="background-color: #059669; width: 30px; height: 30px; border-radius: 50%; border: 3px solid white; display: flex; align-items: center; justify-content: center; box-shadow: 0 2px 6px rgba(0,0,0,0.3);"><div style="color: white; font-size: 16px;">üöÇ</div></div>',
  iconSize: [30, 30],
  iconAnchor: [15, 15],
});

const attractionIcon = L.divIcon({
  html: '<div style="background-color: #dc2626; width: 25px; height: 25px; border-radius: 50%; border: 3px solid white; display: flex; align-items: center; justify-content: center; box-shadow: 0 2px 6px rgba(0,0,0,0.3);"><div style="color: white; font-size: 12px;">üìç</div></div>',
  iconSize: [25, 25],
  iconAnchor: [12, 12],
});

L.Marker.prototype.options.icon = DefaultIcon;

// Component to fit map bounds to all markers
function FitBounds({ positions }) {
  const map = useMap();
  
  useEffect(() => {
    if (positions.length > 0) {
      const group = new L.featureGroup(positions.map(pos => L.marker(pos)));
      map.fitBounds(group.getBounds().pad(0.1));
    }
  }, [map, positions]);
  
  return null;
}

const MapView = () => {
  const [currentTrip] = useState(getTodaysTrip());
  const [userLocation, setUserLocation] = useState(null);
  const [distances, setDistances] = useState({});

  // Convert 24-hour time to 12-hour AM/PM format
  const formatTime = (time24) => {
    if (!time24) return '';
    const [hours, minutes] = time24.split(':');
    const hour12 = parseInt(hours) % 12 || 12;
    const ampm = parseInt(hours) >= 12 ? 'PM' : 'AM';
    return `${hour12}:${minutes} ${ampm}`;
  };

  // Collect all positions for the current trip
  const getAllPositions = () => {
    const positions = [];
    
    // Add hotel
    if (currentTrip.hotel?.coords) {
      positions.push(currentTrip.hotel.coords);
    }
    
    // Add transport stations
    if (currentTrip.transport?.from?.coords) {
      positions.push(currentTrip.transport.from.coords);
    }
    if (currentTrip.transport?.to?.coords) {
      positions.push(currentTrip.transport.to.coords);
    }
    
    // Add attractions
    if (currentTrip.attractions) {
      currentTrip.attractions.forEach(attraction => {
        if (attraction.coords) {
          positions.push(attraction.coords);
        }
      });
    }
    
    return positions;
  };

  const calculateDistance = (lat1, lon1, lat2, lon2) => {
    const R = 6371; // Radius of the Earth in km
    const dLat = (lat2 - lat1) * Math.PI / 180;
    const dLon = (lon2 - lon1) * Math.PI / 180;
    const a = 
      Math.sin(dLat/2) * Math.sin(dLat/2) +
      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLon/2) * Math.sin(dLon/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    const d = R * c; // Distance in km
    return d;
  };

  const handleUseLocation = () => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition((position) => {
        const userLat = position.coords.latitude;
        const userLng = position.coords.longitude;
        setUserLocation([userLat, userLng]);

        // Calculate distances to all locations
        const newDistances = {};
        
        if (currentTrip.hotel?.coords) {
          const dist = calculateDistance(userLat, userLng, currentTrip.hotel.coords[0], currentTrip.hotel.coords[1]);
          const walkTime = Math.round(dist * 12); // Rough estimate: 12 min per km
          newDistances.hotel = `${dist.toFixed(1)}km (${walkTime} min walk)`;
        }
        
        if (currentTrip.transport?.from?.coords) {
          const dist = calculateDistance(userLat, userLng, currentTrip.transport.from.coords[0], currentTrip.transport.from.coords[1]);
          const walkTime = Math.round(dist * 12);
          newDistances.station = `${dist.toFixed(1)}km (${walkTime} min walk)`;
        }
        
        setDistances(newDistances);
      }, (error) => {
        console.error("Error getting user location:", error);
        alert('Could not get your location. Please ensure location services are enabled.');
      });
    } else {
      alert('Geolocation is not supported by this browser.');
    }
  };

  const openInGoogleMaps = (coords) => {
    const url = `https://www.google.com/maps/search/?api=1&query=${coords[0]},${coords[1]}`;
    window.open(url, '_blank');
  };

  const openDirections = (destinationCoords) => {
    const origin = userLocation ? `${userLocation[0]},${userLocation[1]}` : '';
    const destination = `${destinationCoords[0]},${destinationCoords[1]}`;
    const url = `https://www.google.com/maps/dir/?api=1&origin=${origin}&destination=${destination}`;
    window.open(url, '_blank');
  };

  const defaultCenter = currentTrip.hotel?.coords || [46.6863, 7.8632];
  const allPositions = getAllPositions();

  return (
    <div className="h-full bg-gray-50 flex flex-col">
      {/* Header */}
      <div className="bg-blue-600 text-white p-4">
        <div className="text-center">
          <h1 className="text-lg font-semibold mb-1">üó∫Ô∏è Trip Map</h1>
          <p className="text-blue-100 text-sm">Day {currentTrip.dayNumber}: {currentTrip.city}</p>
        </div>
      </div>

      {/* Interactive Map */}
      <div className="flex-1 relative">
        <MapContainer
          center={defaultCenter}
          zoom={12}
          style={{ height: '100%', width: '100%' }}
          className="z-0"
        >
          <TileLayer
            url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
            attribution='¬© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
          />
          
          {/* Fit bounds to all locations */}
          <FitBounds positions={allPositions} />
          
          {/* User location marker */}
          {userLocation && (
            <Marker position={userLocation} icon={L.divIcon({
              html: '<div style="background-color: #ef4444; width: 20px; height: 20px; border-radius: 50%; border: 3px solid white; box-shadow: 0 2px 4px rgba(0,0,0,0.3);"></div>',
              iconSize: [20, 20],
              iconAnchor: [10, 10],
            })}>
              <Popup>
                <div className="text-center">
                  <strong>üìç Your Location</strong>
                </div>
              </Popup>
            </Marker>
          )}
          
          {/* Hotel marker */}
          {currentTrip.hotel?.coords && (
            <Marker position={currentTrip.hotel.coords} icon={hotelIcon}>
              <Popup>
                <div className="min-w-48">
                  <div className="flex items-center gap-2 mb-2">
                    <Hotel className="w-4 h-4 text-purple-600" />
                    <strong>{currentTrip.hotel.name}</strong>
                  </div>
                  <p className="text-sm text-gray-600 mb-2">{currentTrip.hotel.address}</p>
                  <div className="flex gap-2">
                    <button
                      onClick={() => openDirections(currentTrip.hotel.coords)}
                      className="bg-purple-600 text-white px-3 py-1 rounded text-xs hover:bg-purple-700"
                    >
                      Directions
                    </button>
                    {currentTrip.hotel.reservationLink && (
                      <button
                        onClick={() => window.open(currentTrip.hotel.reservationLink, '_blank')}
                        className="bg-gray-100 text-gray-700 px-3 py-1 rounded text-xs hover:bg-gray-200"
                      >
                        Booking
                      </button>
                    )}
                  </div>
                </div>
              </Popup>
            </Marker>
          )}
          
          {/* Transport stations */}
          {currentTrip.transport?.from?.coords && (
            <Marker position={currentTrip.transport.from.coords} icon={trainIcon}>
              <Popup>
                <div className="min-w-48">
                  <div className="flex items-center gap-2 mb-2">
                    <Train className="w-4 h-4 text-green-600" />
                    <strong>{currentTrip.transport.from.station}</strong>
                  </div>
                  <p className="text-sm text-gray-600 mb-2">{currentTrip.transport.from.address}</p>
                  {currentTrip.transport.platform && (
                    <p className="text-xs text-gray-500 mb-2">Platform {currentTrip.transport.from.platform}</p>
                  )}
                  <button
                    onClick={() => openDirections(currentTrip.transport.from.coords)}
                    className="bg-green-600 text-white px-3 py-1 rounded text-xs hover:bg-green-700"
                  >
                    Get Directions
                  </button>
                </div>
              </Popup>
            </Marker>
          )}

          {currentTrip.transport?.to?.coords && (
            <Marker position={currentTrip.transport.to.coords} icon={trainIcon}>
              <Popup>
                <div className="min-w-48">
                  <div className="flex items-center gap-2 mb-2">
                    <Train className="w-4 h-4 text-green-600" />
                    <strong>{currentTrip.transport.to.station}</strong>
                  </div>
                  <p className="text-sm text-gray-600 mb-2">{currentTrip.transport.to.address}</p>
                  <button
                    onClick={() => openDirections(currentTrip.transport.to.coords)}
                    className="bg-green-600 text-white px-3 py-1 rounded text-xs hover:bg-green-700"
                  >
                    Get Directions
                  </button>
                </div>
              </Popup>
            </Marker>
          )}
          
          {/* Attraction markers */}
          {currentTrip.attractions?.map((attraction, index) => (
            attraction.coords && (
              <Marker key={index} position={attraction.coords} icon={attractionIcon}>
                <Popup>
                  <div className="min-w-48">
                    <div className="flex items-center gap-2 mb-2">
                      <Camera className="w-4 h-4 text-red-600" />
                      <strong>{attraction.name}</strong>
                    </div>
                    <p className="text-sm text-gray-600 mb-2">{attraction.address}</p>
                    <button
                      onClick={() => openDirections(attraction.coords)}
                      className="bg-red-600 text-white px-3 py-1 rounded text-xs hover:bg-red-700"
                    >
                      Visit
                    </button>
                  </div>
                </Popup>
              </Marker>
            )
          ))}
        </MapContainer>
      </div>

      {/* Distance Info & Controls */}
      <div className="bg-white border-t border-gray-200 p-4">
        {/* Location Button */}
        <div className="flex gap-2 mb-4">
          <button
            onClick={handleUseLocation}
            className="flex-1 bg-blue-600 text-white py-2 px-4 rounded-md text-sm font-medium hover:bg-blue-700 transition-colors flex items-center justify-center gap-2"
          >
            <Navigation className="w-4 h-4" />
            Use My Location
          </button>
          
          <button
            onClick={() => openDirections(currentTrip.hotel?.coords || [])}
            className="flex-1 bg-gray-100 text-gray-700 py-2 px-4 rounded-md text-sm font-medium hover:bg-gray-200 transition-colors flex items-center justify-center gap-2"
          >
            <ExternalLink className="w-4 h-4" />
            Directions to Hotel
          </button>
        </div>

        {/* Distance Info */}
        {Object.keys(distances).length > 0 && (
          <>
            <h3 className="font-semibold text-gray-900 mb-3">üìç Distance Info</h3>
            <div className="space-y-2 text-sm mb-4">
              {distances.hotel && (
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">From Your Location ‚Üí Hotel:</span>
                  <span className="font-medium text-purple-600">{distances.hotel}</span>
                </div>
              )}
              {distances.station && (
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">From Your Location ‚Üí Station:</span>
                  <span className="font-medium text-green-600">{distances.station}</span>
                </div>
              )}
            </div>
          </>
        )}

        {/* Quick Navigation Buttons */}
        <div className="grid grid-cols-2 gap-2">
          <button
            onClick={() => openDirections(currentTrip.hotel?.coords)}
            className="bg-purple-50 text-purple-700 py-2 px-3 rounded-md text-sm font-medium hover:bg-purple-100 transition-colors flex items-center justify-center gap-2"
          >
            <Hotel className="w-4 h-4" />
            To Hotel
          </button>
          
          {currentTrip.transport?.from?.coords && (
            <button
              onClick={() => openDirections(currentTrip.transport.from.coords)}
              className="bg-green-50 text-green-700 py-2 px-3 rounded-md text-sm font-medium hover:bg-green-100 transition-colors flex items-center justify-center gap-2"
            >
              <Train className="w-4 h-4" />
              To Station
            </button>
          )}
        </div>
      </div>
    </div>
  );
};

export default MapView;